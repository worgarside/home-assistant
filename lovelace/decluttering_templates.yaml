---
active_media_player_template:
  default:
    icon: speaker
  card:
    type: conditional
    conditions:
      - entity: binary_sensor.[[binary_sensor_name]]_active
        state: "on"
    card:
      type: custom:mini-media-player
      entity: media_player.[[media_player]]
      icon: mdi:[[icon]]
      artwork: cover
      hide:
        volume: true
        power_state: false

tfl_service_warning_template:
  card:
    type: conditional
    conditions:
      - entity: sensor.[[tfl_line]]
        state_not: Good Service
    card:
      type: entities
      card_mod:
        style: |
          ha-card {
            --ha-card-background:
            {% if "good service" in (states("sensor.[[tfl_line]]") | lower) %}
              #007229;
            {% elif "minor delays" in (states("sensor.[[tfl_line]]") | lower) %}
              #BA6F08;
            {% elif "part closure" in (states("sensor.[[tfl_line]]") | lower) %}
              #BA6F08;
            {% elif "part suspended" in (states("sensor.[[tfl_line]]") | lower) %}
              #BA6F08;
            {% elif "planned closure" in (states("sensor.[[tfl_line]]") | lower) %}
              #D80000;
            {% elif "reduced service" in (states("sensor.[[tfl_line]]") | lower) %}
              #BA6F08;
            {% elif "service closed" in (states("sensor.[[tfl_line]]") | lower) %}
              #D80000;
            {% elif "severe delays" in (states("sensor.[[tfl_line]]") | lower) %}
              #D80000;
            {% elif "special service" in (states("sensor.[[tfl_line]]") | lower) %}
              #BA6F08;
            {% elif "suspended" in (states("sensor.[[tfl_line]]") | lower) %}
              #D80000;
            {% else %}
              #FFFFFF;
            {% endif %}
            margin: 10px;
          }
      entities:
        - entity: sensor.[[tfl_line]]
          card_mod:
            style: |
              :host {
                --card-mod-icon-color: black;
              }

london_air_quality_inner_template:
  card:
    type: conditional
    conditions:
      - entity: sensor.[[borough]]
        state: "[[state]]"
    card:
      type: entities
      card_mod:
        style: |
          ha-card {
            box-shadow: none;
            --ha-card-background: [[bg_color]];
          }
          #states {
            padding: 6px 8px;
          }
      entities:
        - entity: sensor.[[borough]]
          style:
            hui-generic-entity-row:
              $: |
                state-badge, div.text-content:not(.info) {
                  display: none;
                }

# "binary_sensor.london_air_{{ '[[state]]' | lower | replace(' ', '_') }}_active"
london_air_quality_outer_template:
  card:
    type: conditional
    conditions:
      - entity: "[[conditional_sensor]]"
        state: "on"
    card:
      type: custom:layout-card
      layout_type: custom:horizontal-layout
      layout:
        width: 150
        max_cols: 2
      cards:
        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: barking_and_dagenham
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: bexley
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: brent
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: camden
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: city_of_london
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: croydon
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: ealing
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: enfield
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: greenwich
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: hackney
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: haringey
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: harrow
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: havering
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: hillingdon
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: islington
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: kensington_and_chelsea
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: kingston
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: lambeth
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: lewisham
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: merton
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: redbridge
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: richmond
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: southwark
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: sutton
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: tower_hamlets
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: wandsworth
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

        - type: custom:decluttering-card
          template: london_air_quality_inner_template
          variables:
            - borough: westminster
            - state: "[[state]]"
            - bg_color: "[[bg_color]]"

rgb_light_template:
  card:
    type: custom:rgb-light-card
    entity: "[[entity]]"
    justify: around
    colors:
      - rgb_color:
          - 64
          - 0
          - 255
      - rgb_color:
          - 251
          - 24
          - 128
      - rgb_color:
          - 28
          - 255
          - 64
      - rgb_color:
          - 251
          - 27
          - 64
      - rgbww_color:
          - 0
          - 0
          - 0
          - 255
          - 0

folding_white_light_template:
  card:
    type: custom:fold-entity-row
    head:
      entity: "[[entity]]"
      name: "[[name]]"
    entities:
      - type: custom:slider-entity-row
        entity: "[[entity]]"
        full_row: true
        hide_state: true

folding_rgb_light_template:
  variables:
    - auto_entity_filter_template: ""
  card:
    type: custom:auto-entities
    card:
      type: custom:fold-entity-row
      head:
        entity: "[[entity]]"
        name: "[[name]]"
    filter:
      template: "[[auto_entity_filter_template]]"
    entities:
      - type: custom:slider-entity-row
        entity: "[[entity]]"
        full_row: true
        hide_state: true
      - type: custom:decluttering-card
        template: rgb_light_template
        variables:
          - entity: "[[entity]]"

folding_rgb_light_with_effects_template:
  card:
    type: custom:auto-entities
    card:
      type: custom:fold-entity-row
      head:
        entity: "[[entity]]"
        name: "[[name]]"
    filter:
      template: "[[auto_entity_filter_template]]"
    entities:
      - type: custom:slider-entity-row
        entity: "[[entity]]"
        full_row: true
        hide_state: true
      - type: custom:decluttering-card
        template: rgb_light_template
        variables:
          - entity: "[[entity]]"
      - type: custom:light-entity-card
        card_mod:
          style: |
            paper-dropdown-menu {
              width: 75%;
              margin-top: -15px;
            }
        entity: "[[entity]]"
        hide_header: true
        brightness: false
        color_temp: false
        color_picker: false
        child_card: true

pi_stats_graph_card_template:
  card:
    type: custom:mini-graph-card
    name: "[[name]]"
    card_mod:
      style: |
        ha-card {
          box-shadow: none;
          border: none;
        }
        .graph {
          padding: 5px;
        }
    entities:
      - entity: sensor.clmtpi[[sensor_suffix]]
        name: Clmt Pi
        color: "#FF9800"
      - entity: sensor.crtpi[[sensor_suffix]]
        name: CRT Pi
        color: "#02D1D1"
      - entity: sensor.growpi[[sensor_suffix]]
        name: Grow Pi
        color: "#E74B3B"
      - entity: sensor.[[hasspi_sensor]]
        name: HAss Pi
        color: "#9B59B6"
      - entity: sensor.mtrxpi[[sensor_suffix]]
        name: Mtrx Pi
        color: "#F1C40E"
      - entity: sensor.vsmppi[[sensor_suffix]]
        name: VSMP Pi
        color: "#029E44"
    show:
      state: false
      legend: false
      labels: true
      fill: false
    hours_to_show: 2
    points_per_hour: 30
    upper_bound: "[[upper_bound]]"
    lower_bound: 0
    height: 250
    icon: "[[icon]]"
    line_width: 5
    font_size: 75

pi_stats_legend_card_template:
  card:
    type: custom:mini-graph-card
    entities:
      - entity: sensor.clmtpi[[sensor_suffix]]
        name: Clmt Pi
        color: "#FF9800"
      - entity: sensor.crtpi[[sensor_suffix]]
        name: CRT Pi
        color: "#02D1D1"
      - entity: sensor.growpi[[sensor_suffix]]
        name: Grow Pi
        color: "#E74B3B"
      - entity: sensor.[[hasspi_sensor]]
        name: HAss Pi
        color: "#9B59B6"
      - entity: sensor.mtrxpi[[sensor_suffix]]
        name: Mtrx Pi
        color: "#F1C40E"
      - entity: sensor.vsmppi[[sensor_suffix]]
        name: VSMP Pi
        color: "#029E44"
    show:
      legend: true
      icon: false
      state: false
      name: false
    card_mod:
      style: |
        ha-card {
          box-shadow: none;
          border: none;
        }
        .line--rect, .fill--rect, .graph__container__svg {
          display: none;
        }
        ha-card.flex.type-custom-mini-graph-card, .graph__legend {
          padding: 0px;
        }
        .type-custom-mini-graph-card {
          margin-top: -10px;
        }

addon_stats_graph_card_template:
  card:
    type: custom:mini-graph-card
    name: "[[name]]"
    card_mod:
      style: |
        ha-card.type-custom-mini-graph-card {
          box-shadow: none;
          border: none;
        }
        .graph {
          padding: 0px;
        }
    entities:
      # TODO add total with no line but fill
      - entity: sensor.esphome_add_on_[[sensor_type]]_usage
        name: ESPHome
        color: "#FF0000"
      - entity: sensor.google_drive_backup_add_on_[[sensor_type]]_usage
        name: Google Drive Backup
        color: "#FF6600"
      - entity: sensor.ha_remote_logger_[[sensor_type]]_usage
        name: HA Remote Logger
        color: "#FFCC00"
      - entity: sensor.mariadb_[[sensor_type]]_usage
        name: MariaDB
        color: "#00FF00"
      - entity: sensor.matter_server_[[sensor_type]]_usage
        name: Matter Server
        color: "#00FFFF"
      - entity: sensor.mosquitto_broker_[[sensor_type]]_usage
        name: Mosquitto Broker
        color: "#0000FF"
      - entity: sensor.plex_media_server_[[sensor_type]]_usage
        name: Plex Media Server
        color: "#6600FF"
      - entity: sensor.silicon_labs_multiprotocol_add_on_[[sensor_type]]_usage
        name: Silicon Labs Multiprotocol
        color: "#CC00FF"
      - entity: sensor.terminal_ssh_add_on_[[sensor_type]]_usage
        name: Terminal & SSH
        color: "#FF00FF"
      - entity: sensor.visual_studio_code_add_on_[[sensor_type]]_usage
        name: VSCode
        color: "#FF0066"
      - entity: sensor.yas_209_bridge_[[sensor_type]]_usage
        name: YAS-209 Bridge
        color: "#FF0000"
    hours_to_show: 2
    points_per_hour: 30
    upper_bound: ~10
    lower_bound: 0
    height: 250
    icon: "[[icon]]"
    line_width: 3
    font_size: 75
    show:
      state: false
      legend: false
      labels: true
      fill: false

addon_stats_legend_card_template:
  card:
    type: custom:mini-graph-card
    entities:
      - entity: sensor.esphome_add_on_[[sensor_type]]_usage
        name: ESPHome
        color: "#FF0000"
      - entity: sensor.google_drive_backup_add_on_[[sensor_type]]_usage
        name: Google Drive Backup
        color: "#FF6600"
      - entity: sensor.ha_remote_logger_[[sensor_type]]_usage
        name: HA Remote Logger
        color: "#FFCC00"
      - entity: sensor.mariadb_[[sensor_type]]_usage
        name: MariaDB
        color: "#00FF00"
      - entity: sensor.matter_server_[[sensor_type]]_usage
        name: Matter Server
        color: "#00FFFF"
      - entity: sensor.mosquitto_broker_[[sensor_type]]_usage
        name: Mosquitto Broker
        color: "#0000FF"
      - entity: sensor.plex_media_server_[[sensor_type]]_usage
        name: Plex Media Server
        color: "#6600FF"
      - entity: sensor.silicon_labs_multiprotocol_add_on_[[sensor_type]]_usage
        name: Silicon Labs Multiprotocol
        color: "#CC00FF"
      - entity: sensor.terminal_ssh_add_on_[[sensor_type]]_usage
        name: Terminal & SSH
        color: "#FF00FF"
      - entity: sensor.visual_studio_code_add_on_[[sensor_type]]_usage
        name: VSCode
        color: "#FF0066"
      - entity: sensor.yas_209_bridge_[[sensor_type]]_usage
        name: YAS-209 Bridge
        color: "#FF0000"
    show:
      state: false
      legend: true
      labels: false
      icon: false
      name: false
    font_size: 90
    card_mod:
      style: |
        ha-card {
          box-shadow: none;
          border: none;
          flex: 0.65 1 50%;
        }
        ha-card > div.graph > div.graph__legend {
          flex-flow: column;
        }
        .line--rect, .fill--rect, .graph__container__svg {
          display: none;
        }
        :host {
          max-width: 200px;
        }

repo_pr_list_card_template:
  card:
    type: custom:vertical-stack-in-card
    cards:
      - type: markdown
        content: |
          ## <ha-icon icon="mdi:github"></ha-icon> [[repo_name]]
      - type: conditional
        conditions:
          - entity: 'sensor.[[repo_slug]]_pull_requests'
            state: "0"
        card:
          type: markdown
          content: "### No open pull requests"
          style: |
            ha-card {
              box-shadow: none;
              border: none;
            }
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "0"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "1"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "2"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "3"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "4"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "5"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "6"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "7"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "8"
      - type: divider
      - type: custom:decluttering-card
        template: pr_summary_card_template
        variables:
          - repo_slug: "[[repo_slug]]"
          - pr_count_id: "9"

pr_summary_card_template:
  card:
    type: custom:state-switch
    entity: "{{ state_attr('sensor.[[repo_slug]]_pull_requests', '[[pr_count_id]]') is none }}"
    states:
      false:
        type: custom:button-card
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              content:
                type: entities
                entities:
                  - type: custom:button-card
                    card_mod:
                      style: |
                        ha-card {
                          box-shadow: none;
                          border: none;
                          cursor: default;
                        }
                    tap_action:
                      action: call-service
                      service: shell_command.mark_pr_as_ready_for_review
                      service_data:
                        url: >
                          [[[
                            return states[
                              "sensor.[[repo_slug]]_pull_requests"
                            ].attributes["[[pr_count_id]]"].url
                          ]]]
                        draft: >
                          [[[
                            return states[
                              "sensor.[[repo_slug]]_pull_requests"
                            ].attributes["[[pr_count_id]]"].isDraft
                          ]]]
                    styles:
                      grid:
                        - grid-template-areas: "content"
                    custom_fields:
                      content: >
                        [[[
                          const isDraft = states["sensor.[[repo_slug]]_pull_requests"]
                            .attributes["[[pr_count_id]]"]
                            .isDraft;

                          const label = isDraft ? "Ready for review" : "Mark as draft";
                          const icon = isDraft ? "mdi:file-find" : "mdi:note-edit";

                          return `
                            <div style="
                              display: flex;
                              justify-content: space-between;
                              max-width: 300px;
                              margin: 0 auto;
                            ">
                              <h3 style="
                                margin: 0;
                                padding-top: 3px;
                              ">${label}</h3>
                              <ha-icon
                                icon="${icon}"
                                style="
                                  width: 28px;
                                  height: 28px;
                                  margin: 0 0 0 auto;
                                "
                              ></ha-icon>
                            </div>
                          `
                        ]]]
        double_tap_action:
          action: url
          url_path: "[[[ return variables.pr.url ]]]"
        card_mod:
          style: |
            ha-card {
              box-shadow: none;
              border: none;
            }
        styles:
          custom_fields:
            subtitle:
              - justify-self: start
              - margin-left: 10px
              - margin-top: 5px
              - color: grey
              - font-size: 14px
            title:
              - justify-self: start
              - margin-left: 10px
            labels:
              - margin-top: 5px
              - margin-left: 10px
              - margin-right: 10px
          grid:
            - grid-template-areas: >
                "title title"
                "subtitle subtitle"
                "labels labels"
        variables:
          pr: >
            [[[
              return states["sensor.[[repo_slug]]_pull_requests"].attributes["[[pr_count_id]]"]
            ]]]
          time_since_pr: >
            [[[
              const pr = states["sensor.[[repo_slug]]_pull_requests"].attributes["[[pr_count_id]]"];

              if (!pr) {return null;}

              const utcnow = Date.now();
              const createdAt = new Date(pr.createdAt).getTime();
              const mins_since_pr = (utcnow - createdAt) / (1000 * 60);

              let time_since_pr;

              if (mins_since_pr < 60) {
                time_since_pr = `${Math.floor(mins_since_pr)} minutes ago`;
              } else if (mins_since_pr < 60 * 24) {
                time_since_pr = `${Math.floor(mins_since_pr / 60)} hours ago`;
              } else {
                time_since_pr = `${Math.floor(mins_since_pr / (60 * 24))} days ago`;
              }

              return time_since_pr;
            ]]]
        custom_fields:
          subtitle: >
            [[[
              if (!variables.pr) {return null;}

              return `
                #${variables.pr.number} opened
                ${variables.time_since_pr} by
                @${variables.pr.author.replace(/^app\//, "")}
              `
            ]]]
          title: >
            [[[
              if (!variables.pr) {return null;}

              function replaceBackticksWithCodeTags(inputString) {
                let codeTagOpen = false;

                return inputString.replace(
                  /`/g, () => (codeTagOpen = !codeTagOpen) ?
                    '<span style="font-family: monospace;">' :
                    '</span>'
                );
              }

              const { title, isDraft, statusCheckRollup, autoMergeRequest } = variables.pr;

              const pr_icon_color = isDraft ? 'grey' : '#57AB5A';
              let title_str = title.length > 50 ? `${title.substring(0, 48)}...` : title;
              let title_html = `
                <ha-icon
                  icon="mdi:source-pull"
                  style="width: 22px; height: 22px; color: ${pr_icon_color};"
                ></ha-icon>
                <span> ${replaceBackticksWithCodeTags(title_str)}</span>
              `;

              if (statusCheckRollup.includes("IN_PROGRESS")) {
                title_html += `
                  <ha-icon
                    icon="mdi:circle"
                    style="width: 14px; height: 14px; color: #DBAB0A;"
                  ></ha-icon>
                `;
              } else if (statusCheckRollup.includes("FAILURE")) {
                title_html += `
                  <ha-icon
                    icon="mdi:close-thick"
                    style="width: 15px; height: 15px; color: #E5534B;">
                  </ha-icon>
                `;
              } else {
                const checkIconColor = autoMergeRequest ? '#57AB5A' : '#7E867F';
                title_html += `
                  <ha-icon
                    icon="mdi:check-bold"
                    style="width: 15px; height: 15px; color: ${checkIconColor};"
                  ></ha-icon>
                `;
              }

              return title_html;
            ]]]
          labels: >
            [[[
              if (!variables.pr) {return null;}

              const labelColors = {
                'bug': {'font': '#EA9CA5', 'background': '#D73A4A2D'},
                'chore': {'font': '#E48545', 'background': '#8B45132D'},
                'bot:delete-on-merge': {'font': '#FF8181', 'background': '#8B00002D'},
                'bot:keep-updated': {'font': '#85F9A4', 'background': '#87FAA62D'},
                'dependencies': {'font': '#59A8FC', 'background': '#0366D62D'},
                'documentation': {'font': '#35AAFF', 'background': '#0075CA2D'},
                'enhancement': {'font': '#9FEEEE', 'background': '#A2EEEF2D'},
                'feature-request': {'font': '#9FEEEE', 'background': '#A2EEEF2D'},
                'github-actions': {'font': '#999999', 'background': '#0000002D'},
                'hasspi-sync': {'font': '#51C2EF', 'background': '#53C2F12D'},
                'hotfix': {'font': '#EA9CA5', 'background': '#D73A4A2D'},
                'major': {'font': '#FFC5C5', 'background': '#FF00002D'},
                'minor': {'font': '#FFA100', 'background': '#FFA5002D'},
                'non-functional': {'font': '#FFFFFF', 'background': '#FFFFFF2D'},
                'patch': {'font': '#FEFF00', 'background': '#FFFF002D'},
                'python': {'font': '#7DA5E2', 'background': '#2B67C62D'},
                'release': {'font': '#F687F8', 'background': '#C30AC62D'},
                'skip-changelog': {'font': '#FFFFFF', 'background': '#FFFFFF2D'},
                'sync': {'font': '#EAEAEA', 'background': '#EDEDED2D'},
                'tests': {'font': '#17DF21', 'background': '#0E8A162D'},
                'tools': {'font': '#979797', 'background': '#4141412D'},
                'ha:automations': {'font': '#FFC5C5', 'background': '#FF00002D'},
                'ha:config': {'font': '#FF8D6B', 'background': '#FF3F002D'},
                'ha:command-line': {'font': '#FF843D', 'background': '#FF5F002D'},
                'ha:cover': {'font': '#FF830F', 'background': '#FF7F002D'},
                'ha:custom-components': {'font': '#FF9D00', 'background': '#FF9F002D'},
                'ha:device-tracker': {'font': '#FFBB00', 'background': '#FFBF002D'},
                'ha:groups': {'font': '#FEFF00', 'background': '#FFFF002D'},
                'ha:input-boolean': {'font': '#BFFF00', 'background': '#BFFF002D'},
                'ha:input-button': {'font': '#7FFF00', 'background': '#7FFF002D'},
                'ha:input-datetime': {'font': '#3FFF00', 'background': '#3FFF002D'},
                'ha:input-number': {'font': '#00FF00', 'background': '#00FF002D'},
                'ha:input-select': {'font': '#00FF7B', 'background': '#00FF7F2D'},
                'ha:input-text': {'font': '#00FEFF', 'background': '#00FFFF2D'},
                'ha:lovelace': {'font': '#57ABFE', 'background': '#007FFF2D'},
                'ha:media-player': {'font': '#B3C6FF', 'background': '#003FFF2D'},
                'ha:mqtt': {'font': '#10D10DFF', 'background': '#0000FF2D'},
                'ha:pyscript': {'font': '#F5F2FF', 'background': '#3F00FF2D'},
                'ha:rest-command': {'font': '#EAD7FE', 'background': '#7F00FF2D'},
                'ha:scenes': {'font': '#EDBBFF', 'background': '#BF00FF2D'},
                'ha:scripts': {'font': '#FFA0FE', 'background': '#FF00FF2D'},
                'ha:sensors': {'font': '#FFA9E9', 'background': '#FF00BF2D'},
                'ha:shell-command': {'font': '#FFAEE1', 'background': '#FF009F2D'},
                'ha:switch': {'font': '#FEB3D9', 'background': '#FF007F2D'},
                'ha:template': {'font': '#FFBCCD', 'background': '#FF003F2D'},
                'ha:variables': {'font': '#FFC5C5', 'background': '#FF00002D'}
              };

              const defaultColor = {
                background: '#CCCCCC',
                font: '#000000',
              };

              const labelsHTML = variables.pr.labels.sort().map((label) => {
                const color = labelColors[label.trim()] || defaultColor;

                return `
                  <span
                    style="
                      display: inline-block;
                      margin: 1px;
                      padding: 2px 7px;
                      background-color: ${color.background};
                      color: ${color.font};
                      border-radius: 2em;
                      border: 1px solid ${color.font}4B;
                      font-size: 10px;
                      font-weight: 500;
                    ">${label.trim()}</span>`;
              }).join('');

              return `
                <div
                  style="overflow-x: auto; white-space: nowrap; text-align: left;"
                >${labelsHTML}</div>`;
            ]]]
