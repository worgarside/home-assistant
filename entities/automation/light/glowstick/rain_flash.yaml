---
alias: /light/glowstick/rain-flash

id: light_glowstick_rain_flash

mode: single

max_exceeded: silent

trigger:
  - platform: numeric_state
    entity_id: sensor.tomorrow_io_rain_intensity
    above: 0

variables:
  # Store the original state of the glowstick
  original_state: "{{ is_state('light.glowstick', 'on') }}"
  original_brightness: "{{ state_attr('light.glowstick', 'brightness') | int(128) }}"
  original_rgb_color: "{{ state_attr('light.glowstick', 'rgb_color') | default([255, 255, 255]) }}"

  # Check if we're within the 2-hour cooldown period
  last_flash_time: "{{ states('input_datetime.rain_flash_cooldown') }}"
  cooldown_expired: "{{ (as_timestamp(now()) - as_timestamp(last_flash_time)) > 7200 }}"

action:
  - condition: "{{ cooldown_expired }}"

  - alias: Store current time as last flash time
    service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.rain_flash_cooldown
    data:
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - service: light.turn_on
    target:
      entity_id: light.glowstick
    data:
      rgb_color: [0, 0, 255]  # Blue
      brightness: 255
      transition: 2

  - delay:
      seconds: 1

  - service: light.turn_off
    target:
      entity_id: light.glowstick
    data:
      transition: 2

  - delay:
      seconds: 1

  - service: light.turn_on
    target:
      entity_id: light.glowstick
    data:
      rgb_color: [0, 0, 255]  # Blue
      brightness: 255
      transition: 2

  - delay:
      seconds: 1

  - service: light.turn_off
    target:
      entity_id: light.glowstick
    data:
      transition: 2

  - if: "{{ original_state }}"

    then:
      - service: light.turn_on
        target:
          entity_id: light.glowstick
        data:
          rgb_color: "{{ original_rgb_color }}"
          brightness: "{{ original_brightness }}"
          transition: 1

    else:
      - service: light.turn_off
        target:
          entity_id: light.glowstick
        data:
          transition: 1
