---
alias: /light/glowstick/rain-flash

id: light_glowstick_rain_flash

mode: single

max_exceeded: silent

trigger:
  - platform: state
    entity_id: sensor.tomorrow_io_rain_intensity
    from: "0"
    to: ">0"

variables:
  # Store the original state of the glowstick
  original_state: "{{ is_state('light.glowstick', 'on') }}"
  original_brightness: "{{ state_attr('light.glowstick', 'brightness') | int(128) }}"
  original_rgb_color: "{{ state_attr('light.glowstick', 'rgb_color') | default([255, 255, 255]) }}"
  
  # Check if we're within the 2-hour cooldown period
  last_flash_time: "{{ state_attr('var.rain_flash_cooldown', 'last_flash_time') | default('1970-01-01T00:00:00+00:00') }}"
  cooldown_expired: "{{ (as_timestamp(now()) - as_timestamp(last_flash_time)) > 7200 }}"

action:
  - choose:
      - conditions:
          - alias: Check if cooldown has expired (2 hours)
            condition: template
            value_template: "{{ cooldown_expired }}"
        
        sequence:
          - alias: Store current time as last flash time
            service: var.set_attributes
            target:
              entity_id: var.rain_flash_cooldown
            data:
              last_flash_time: "{{ now().isoformat() }}"
          
          - alias: Flash blue twice
            sequence:
              # First flash
              - service: light.turn_on
                target:
                  entity_id: light.glowstick
                data:
                  rgb_color: [0, 0, 255]  # Blue
                  brightness: 255
                  transition: 0.5
              
              - delay:
                  seconds: 1
              
              - service: light.turn_off
                target:
                  entity_id: light.glowstick
                data:
                  transition: 0.5
              
              - delay:
                  seconds: 0.5
              
              # Second flash
              - service: light.turn_on
                target:
                  entity_id: light.glowstick
                data:
                  rgb_color: [0, 0, 255]  # Blue
                  brightness: 255
                  transition: 0.5
              
              - delay:
                  seconds: 1
              
              - service: light.turn_off
                target:
                  entity_id: light.glowstick
                data:
                  transition: 0.5
              
              - delay:
                  seconds: 0.5
          
          - alias: Restore original state
            choose:
              - conditions:
                  - alias: If glowstick was originally on
                    condition: template
                    value_template: "{{ original_state }}"
                
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: light.glowstick
                    data:
                      rgb_color: "{{ original_rgb_color }}"
                      brightness: "{{ original_brightness }}"
                      transition: 1
              
              - conditions:
                  - alias: If glowstick was originally off
                    condition: template
                    value_template: "{{ not original_state }}"
                
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: light.glowstick
                    data:
                      transition: 1