---
alias: /cube/rotate

id: cube_rotate

mode: queued

max: 255

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: 9fb3a3a8b909705eca6e5f2027270388

variables:
  active_face: "{{ states('sensor.cube_active_face') }}"
  target_entity: "{{ states('input_text.cube_entity_' ~ active_face ) | lower }}"
  target_domain: "{{ target_entity.split('.')[0] }}"

condition: >-
  {{
    trigger.event.data.command.startswith('rotate_') and
    states(target_entity) not in ('unavailable', 'unknown', 'off')
  }}

action:
  - alias: Get Percentage Change
    variables:
      pct_delta: "{{ (trigger.event.data.args.relative_degrees | float(0)) * (25/90) }}"

  - service: script.turn_on
    target:
      entity_id: script.debug_persistent_notification
    data:
      variables:
        notification_title: Cube Rotated ({{ pct_delta | round(2) }}%)
        message: |
          ```json
          {{ trigger.event.data }}
          ```

  - choose:
      - alias: Light

        conditions: "{{ target_domain == 'light' }}"

        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ target_entity }}"
            data:
              brightness_step_pct: "{{ pct_delta | round(0) }}"

      - alias: Cover

        conditions: "{{ target_domain == 'cover' }}"

        sequence:
          - service: cover.set_cover_position
            target:
              entity_id: "{{ target_entity }}"
            data:
              position: >-
                {{
                  max(
                    min(
                      states(target_entity) | int(0) + ( pct_delta | round(0) ),
                      100
                    ),
                    0
                  )
                }}

      - alias: Media Player

        conditions: "{{ target_domain == 'media_player' }}"

        sequence:
          - service: media_player.volume_set
            target:
              entity_id: "{{ target_entity }}"
            data:
              volume_level: >-
                {{
                  max(
                    min(
                      states(target_entity) | float(0) + pct_delta,
                      1
                    ),
                    0
                  )
                }}
