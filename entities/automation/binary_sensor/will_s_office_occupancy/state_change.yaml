---
alias: /binary-sensor/will-s-office-occupancy/state-change

id: binary_sensor_will_s_office_occupancy_state_change

mode: restart

trigger:
  - platform: state
    entity_id: binary_sensor.will_s_office_occupancy
    to:
      - "on"
      - "off"

variables:
  state_manager: var.will_s_office_state_manager

  cached_states: >-
    {{
      state_attr("var.will_s_office_state_manager", "entity_states_b64")
      | base64_decode
      | from_json
    }}

action:
  - if: "{{ trigger.to_state.state | bool }}"

    then:
      - parallel:
          - repeat:
              for_each: "{{ label_entities('Restore State after Room Vacancy') | default([]) }}"

              sequence:
                - if: >-
                    {{
                      area_id(repeat.item) == "office"
                      and cached_states.get(repeat.item) | bool(false)
                    }}
                  then:
                    - service: homeassistant.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"

          - service: light.turn_on
            target:
              entity_id: light.will_s_office_voice_assistant_led_ring
            data:
              brightness_pct: "{{ [states('sensor.lighting_modifier') | int(70), 30] | max }}"
              rgb_color: [255, 0, 196] # Purple

    else:
      - variables:
          entity_states: >-
            {% set ns = namespace(e={}) %}
            {%
              for entity in label_entities('Restore State after Room Vacancy') | default([])
              if area_id(entity) == "office"
            %}
              {% set ns.e = dict(ns.e, **{entity: states(entity)}) %}
            {% endfor %}
            {{ ns.e }}

      - parallel:
          - repeat:
              for_each: "{{ entity_states.keys() | list }}"

              sequence:
                - service: homeassistant.turn_off
                  target:
                    entity_id: "{{ repeat.item }}"

                - wait_template: >-
                    {%
                      set cached_states =
                        state_attr("var.will_s_office_state_manager", "entity_states_b64")
                        | base64_decode
                        | from_json
                    %}
                    {{ cached_states.get(repeat.item) | bool("??") is false }}
                  timeout:
                    seconds: 10
                  continue_on_timeout: true

          - service: light.turn_off
            target:
              entity_id: light.will_s_office_voice_assistant_led_ring

      - delay:
          seconds: 1

      # The switching off above will have stored falsy values for all entities in the state manager;
      # they now need to be overwritten with the original states
      - service: var.set
        target:
          entity_id: "{{ state_manager }}"
        data:
          attributes:
            entity_states_b64: "{{ entity_states | to_json | base64_encode }}"
