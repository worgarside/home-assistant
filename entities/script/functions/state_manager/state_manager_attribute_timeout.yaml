---
alias: State Manager | Attribute Timeout

description: Timeout for "should be" on/off attributes of a state manager

mode: parallel

fields:
  state_manager:
    description: The state manager entity to reset attributes for
    required: true
    example: var.will_s_office_state_manager # hacv disable: InvalidEntityConsumed
    selector:
      entity:
        domain: var

variables:
  # "e30=" is "{}" base64 encoded
  cached_states: >-
    {{
      (state_attr(state_manager, "entity_states_b64") or "e30=")
      | base64_decode
      | from_json
      | default({})
    }}

  target_area_id: "{{ area_id(state_manager) }}"

sequence:
  - if: "{{ target_area_id is not defined or target_area_id is none or not target_area_id }}"
    then:
      - service: script.log_exception
        data:
          calling_entity: script.state_manager_attribute_timeout
          message: >-
            Invalid `target_area_id` value `{{ target_area_id | default('<undefined>') }}` for
            state manager `{{ state_manager }}`

      - stop: "Invalid `target_area_id` value: `{{ target_area_id | default('<undefined>') }}`"
        error: true

  - variables:
      entity_states: >-
        {%- set ns = namespace(output=cached_states) %}
        {%
          for k in cached_states.keys()
          if (
            cached_states.get(k) | bool(false)
            and is_state(k, "off")
            and area_id(k) == target_area_id
          )
        %}
          {% set ns.output = dict(ns.output, **{k: false}) %}
        {% endfor %}
        {{ ns.output }}

  - service: var.set
    target:
      entity_id: "{{ state_manager }}"
    data:
      attributes:
        entity_states_b64: "{{ entity_states | to_json | base64_encode }}"
