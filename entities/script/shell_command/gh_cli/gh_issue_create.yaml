---
alias: GH Issue Create

description: Create a new issue on GitHub

mode: queued

fields:
  issue_title:
    name: Issue Title
    description: The title of the issue
    required: true
    selector:
      text:

  issue_labels:
    name: Labels
    description: Add one or more labels to the issue
    required: true
    selector:
      select:
        multiple: true
        options:
          - bug
          - chore
          - feature-request
          - refactor
          - major
          - minor
          - patch
          - tools

  body:
    name: Issue Body
    description: The main body of the issue
    required: true
    selector:
      text:
        multiline: true

  assignee:
    name: Assignee
    description: Who to assign the issue to
    default: worgarside
    selector:
      select:
        options:
          - worgarside

  repository:
    name: Repository
    description: The repo to open the issue in
    default: home-assistant
    required: true
    selector:
      select:
        multiple: false
        options:
          - github-config-files
          - home-assistant
          - home-assistant-appdaemon
          - home-assistant-config-validator
          - led-matrix-controller
          - wg-scripts
          - wg-utilities

sequence:
  - alias: Write body to file
    service: shell_command.write_file
    data:
      body: "{{ body }}"
      file: gh_issue_body.b64
    response_variable: write_file_response

  - alias: Check write file response
    if: "{{ write_file_response.returncode | int(None) != 0 }}"
    then:
      - service: script.log_exception
        data:
          calling_entity: script.gh_issue_create
          message: |
            Failed writing body content to temp file

            ```json
            {{ write_file_response | tojson(indent=2) }}
            ```

      - stop: Write File Failure
        error: true

  - alias: Decode File
    service: shell_command.base64_decode_file
    response_variable: decode_file_response
    data:
      file: gh_issue_body.b64
      output: gh_issue_body.txt

  - alias: Check decode file response
    if: "{{ decode_file_response.returncode | int(None) != 0 }}"
    then:
      - service: script.log_exception
        data:
          calling_entity: script.gh_issue_create
          message: |
            Failed decoding body content from temp file

            ```json
            {{ decode_file_response | tojson(indent=2) }}
            ```

      - stop: Decode File Failure
        error: true

  - alias: Switch GH CLI user to `worgarside-hass`
    service: shell_command.gh
    data:
      command: auth switch
      args: --user worgarside-hass

  - variables:
      message_args: >
        --title {{ issue_title | tojson }}
        --body-file resources/tmp/gh_issue_body.txt
        {% if issue_labels %}--label {{ issue_labels | join(',') | tojson }}{% endif %}
        --assignee {{ assignee | default('worgarside') | tojson }}
        --repo "worgarside/{{ repository | default('home-assistant') }}"

  - alias: Create issue
    service: shell_command.gh
    data:
      command: issue create
      args: "{{ message_args }}"
    response_variable: gh_cli_response

  - alias: Check gh issue create response
    if: "{{ gh_cli_response.returncode | int(None) != 0 }}"
    then:
      - service: script.log_exception
        data:
          calling_entity: script.gh_issue_create
          message: |
            ### Failed to create issue
            #### {{ issue_title }}

            ```json
            {{ gh_cli_response | tojson(indent=2) }}
            ```

      - stop: Issue Create Failure
        error: true

  - variables:
      response:
        stdout: "{{ gh_cli_response['stdout'] }}"
        stderr: "{{ gh_cli_response['stderr'] }}"
        returncode: "{{ gh_cli_response['returncode'] }}"

  - repeat:
      for_each:
        - gh_issue_body.b64
        - gh_issue_body.txt
      sequence:
        - service: shell_command.delete_file
          data:
            file: "{{ repeat.item }}"
          response_variable: delete_file_response

        - alias: Check delete file response
          if: "{{ delete_file_response.returncode | int(None) != 0 }}"
          then:
            - service: script.log_exception
              data:
                calling_entity: script.gh_issue_create
                message: |
                  Failed to delete file `{{ repeat.item }}`

                  ```json
                  {{ delete_file_response | tojson(indent=2) }}
                  ```

  - service: persistent_notification.create
    data:
      title: "GitHub Issue #{{gh_cli_response['stdout'].split('/')[-1] }} Created"
      message: "[{{ issue_title }}]({{ gh_cli_response['stdout'] }})"

  - stop: Return response
    response_variable: response
