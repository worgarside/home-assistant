---
description: >-
  (Try to) get Cosmo to clean a room: if the route is clear, then vacuum the room; otherwise, do
  nothing. Any other conditions should be evaluated in the calling automation/script.

  Returns 1 if the room clean started, 0 otherwise.

mode: parallel

fields:
  room_name:
    description: The name of the room to clean
    required: true

  doors_open_timeout:
    description: How long to wait for doors to be open (defaults to 60 minutes)
    required: false

  repeats:
    description: How many times to repeat the clean (defaults to 3)
    required: false

  suction_level:
    description: The suction level to use (defaults to 2)
    required: false

variables:
  doors_open_timeout: "{{ doors_open_timeout | default(60) | int(60) }}"
  repeats: "{{ max(min(repeats | default(3) | int(3), 3), 1) }}"
  suction_level: "{{ max(min(suction_level | default(2) | int(2), 3), 0) }}"

sequence:
  - alias: Get room ID
    service: script.cosmo_get_room_id_or_name
    data:
      lookup_value: "{{ room_name }}"
    response_variable: room_id

  - alias: Get doors on route to room

    variables:
      doors: >-
        {% set lookup = {
            ("office", "lounge"): ["office", "kitchen"],
            ("office", "kitchen"): ["office", "kitchen"],
            ("office", "bathroom"): ["office", "bathroom"],
            ("office", "hallway"): ["office"],
            ("office", "en_suite"): ["office", "bedroom", "en_suite"],
            ("office", "bedroom"): ["office", "bedroom"],
            ("lounge", "bathroom"): ["kitchen", "bathroom"],
            ("lounge", "hallway"): ["kitchen"],
            ("lounge", "en_suite"): ["bedroom", "en_suite"],
            ("lounge", "bedroom"): ["bedroom"],
            ("kitchen", "bathroom"): ["kitchen", "bathroom"],
            ("kitchen", "hallway"): ["kitchen"],
            ("kitchen", "en_suite"): ["kitchen", "bedroom", "en_suite"],
            ("kitchen", "bedroom"): ["kitchen", "bedroom"],
            ("bathroom", "hallway"): ["bathroom"],
            ("bathroom", "en_suite"): ["bathroom", "bedroom", "en_suite"],
            ("bathroom", "bedroom"): ["bathroom", "bedroom"],
            ("hallway", "en_suite"): ["bedroom", "en_suite" ],
            ("hallway", "bedroom"): ["bedroom"],
            ("en_suite", "bedroom"): ["en_suite"],
          }
        %}

        {% set lookup_key = (
            states("sensor.cosmo_current_room").lower(),
            room_name.lower()
          )
        %}

        {{
          lookup.get(
            lookup_key,
            lookup.get(
              lookup_key[::-1],
              []
            )
          )
        }}

  - alias: Check if doors are open

    continue_on_timeout: true

    wait_template: >-
      {% set ns = namespace(all_open=true) %}

      {% for room in doors %}
        {% set room_state = states('binary_sensor.' ~ room ~ '_door') %}

        {% if room_state in ['unknown', 'unavailable'] %}
          {{ continue }}
        {% endif %}

        {% set ns.all_open = ns.all_open and room_state == 'on' %}
      {% endfor %}

      {{ ns.all_open }}

    timeout:
      minutes: "{{ doors_open_timeout }}"

  - alias: Validate doors are open

    if: "{{ wait.completed }}"

    then:
      - service: dreame_vacuum.vacuum_clean_segment
        target:
          entity_id: vacuum.cosmo
        data:
          segments:
            - "{{ room_id.value }}"
          repeats: "{{ repeats }}"
          suction_level: "{{ suction_level }}"

      - stop: Clean session started
        response_variable: "1"

    else:
      - stop: Clean session not started
        response_variable: "0"
