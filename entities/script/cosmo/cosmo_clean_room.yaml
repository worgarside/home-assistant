---
alias: "Cosmo: Clean Room"

description: >-
  (Try to) get Cosmo to clean a room: if the route is clear, then vacuum the room; otherwise, do
  nothing. Any other conditions should be evaluated in the calling automation/script.

  Returns 1 if the room clean started, 0 otherwise.

mode: restart

fields:
  room_name:
    description: The name of the room to clean
    required: true
    selector:
      area:

  doors_open_timeout:
    description: How long to wait for doors to be open (defaults to 120 minutes)
    required: false
    default: 120
    selector:
      number:
        min: 0
        max: 100
        unit_of_measurement: minutes
        mode: slider

  repeats:
    description: How many times to repeat the clean (defaults to 3)
    required: false
    default: 3
    selector:
      number:
        min: 1
        max: 3
        mode: slider

  suction_level:
    description: The suction level to use (defaults to 2)
    required: false
    default: 2
    selector:
      number:
        min: 0
        max: 3
        mode: slider

variables:
  doors_open_timeout: "{{ doors_open_timeout | default(120) | int(120) }}"

  repeats: "{{ repeats | default(3) | int(3) }}"

  suction_level: "{{ suction_level | default(2) | int(2) }}"

  suction_level_str: "{{ ['quiet', 'standard', 'strong', 'turbo'][suction_level] }}"

  true_response:
    value: true

  false_response:
    value: false

sequence:
  - alias: Get room ID
    service: script.cosmo_get_room_id_or_name
    data:
      lookup_value: "{{ room_name }}"
    response_variable: room_id

  - alias: Get doors on route to room

    variables:
      doors: >-
        {% set lookup = {
            ("office", "lounge"): ["office", "kitchen"],
            ("office", "kitchen"): ["office", "kitchen"],
            ("office", "bathroom"): ["office", "bathroom"],
            ("office", "hallway"): ["office"],
            ("office", "en_suite"): ["office", "bedroom", "en_suite"],
            ("office", "bedroom"): ["office", "bedroom"],
            ("lounge", "bathroom"): ["kitchen", "bathroom"],
            ("lounge", "hallway"): ["kitchen"],
            ("lounge", "en_suite"): ["bedroom", "en_suite"],
            ("lounge", "bedroom"): ["bedroom"],
            ("kitchen", "bathroom"): ["kitchen", "bathroom"],
            ("kitchen", "hallway"): ["kitchen"],
            ("kitchen", "en_suite"): ["kitchen", "bedroom", "en_suite"],
            ("kitchen", "bedroom"): ["kitchen", "bedroom"],
            ("bathroom", "hallway"): ["bathroom"],
            ("bathroom", "en_suite"): ["bathroom", "bedroom", "en_suite"],
            ("bathroom", "bedroom"): ["bathroom", "bedroom"],
            ("hallway", "en_suite"): ["bedroom", "en_suite" ],
            ("hallway", "bedroom"): ["bedroom"],
            ("en_suite", "bedroom"): ["en_suite"],
          }
        %}

        {% set lookup_key = (
            states("sensor.cosmo_current_room").lower(),
            room_name.lower()
          )
        %}

        {{
          lookup.get(
            lookup_key,
            lookup.get(
              lookup_key[::-1],
              []
            )
          )
        }}

  - alias: If the doors aren't already open
    if: >-
      {% set ns = namespace(any_closed=False) %}
      {%
        for room in doors
        if (
          not ns.any_closed and
          is_state('binary_sensor.' ~ room ~ '_sensor_contact', 'off')
        )
      %}
        {% set ns.any_closed = True %}
      {% endfor %}

      {{ ns.any_closed }}

    then:
      - alias: Wait for doors to have been open for 2 minutes

        continue_on_timeout: true

        wait_template: >-
          {% set ns = namespace(all_open_long_enough=True) %}
          {% set now_ts = states('sensor.date_time_iso') | as_timestamp %}

          {%
            for room in doors
            if (
              ns.all_open_long_enough and
              states.binary_sensor |
                selectattr('entity_id', 'eq', 'binary_sensor.' ~ room ~ '_door_sensor_contact') |
                list |
                length > 0
            )
          %}
            {% set door_state = states.binary_sensor[room ~ '_door_sensor_contact'] %}
            {% set door_last_changed = door_state.last_changed | as_timestamp %}

            {%
              if (
                door_state.state not in ['unknown', 'unavailable', 'on']
              ) or not (
                door_last_changed and (now_ts - door_last_changed) > 120
              )
            %}
              {% set ns.all_open_long_enough = False %}
            {% endif %}
          {% endfor %}

          {{ ns.all_open_long_enough }}

        timeout:
          minutes: "{{ doors_open_timeout }}"

      - alias: Validate doors are open

        if: "{{ not wait.completed }}"

        then:
          - stop: Clean session not started
            response_variable: false_response

  - alias: Set suction level
    service: select.select_option
    target:
      entity_id: select.cosmo_suction_level
    data:
      option: "{{ suction_level_str }}"

  - service: dreame_vacuum.vacuum_clean_segment
    target:
      entity_id: vacuum.cosmo
    data:
      segments:
        - "{{ room_id.value }}"
      repeats: "{{ repeats }}"
      suction_level: "{{ suction_level }}"

  - stop: Clean session started
    response_variable: true_response
