---
alias: "Cosmo: Clean Room"

description: >-
  (Try to) get Cosmo to clean a room: if the route is clear, then vacuum the room; otherwise, do
  nothing. Any other conditions should be evaluated in the calling automation/script.

  Returns 1 if the room clean started, 0 otherwise.

mode: restart

fields:
  room_name:
    description: The name of the room to clean
    required: true
    selector:
      area:

  doors_open_timeout:
    description: How long to wait for doors to be open (defaults to 120 minutes)
    required: false
    default: 120
    selector:
      number:
        min: 0
        max: 100
        unit_of_measurement: minutes
        mode: slider

  repeats:
    description: How many times to repeat the clean (defaults to 3)
    required: false
    default: 3
    selector:
      number:
        min: 1
        max: 3
        mode: slider

  suction_level:
    description: The suction level to use (defaults to 2)
    required: false
    default: 2
    selector:
      number:
        min: 0
        max: 3
        mode: slider

variables:
  doors_open_timeout: "{{ doors_open_timeout | default(120) | int(120) }}"

  repeats: "{{ repeats | default(3) | int(3) }}"

  suction_level: "{{ suction_level | default(2) | int(2) }}"

  suction_level_str: "{{ ['quiet', 'standard', 'strong', 'turbo'][suction_level] }}"

  true_response:
    value: true

  false_response:
    value: false

sequence:
  - alias: Get room ID
    service: script.cosmo_get_room_id_or_name
    data:
      lookup_value: "{{ room_name }}"
    response_variable: room_id

  - alias: Set suction level
    service: select.select_option
    target:
      entity_id: select.cosmo_suction_level
    data:
      option: "{{ suction_level_str }}"

  - service: dreame_vacuum.vacuum_clean_segment
    target:
      entity_id: vacuum.cosmo
    data:
      segments:
        - "{{ room_id.value }}"
      repeats: "{{ repeats }}"
      suction_level: "{{ suction_level }}"

  - stop: Clean session started
    response_variable: true_response
