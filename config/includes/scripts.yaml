---
debug_persistent_notification:
  description: "Create a persistent notification if debugging is turned on"
  mode: parallel
  fields:
    title:
      description: "The notification's title"
      example: "Something has happened!"
    message:
      description: "The notification's message body"
      example: "More detail about this thing"
  sequence:
    - alias: "Check if debugging is turned on"
      condition: state
      entity_id: input_boolean.debug_with_persistent_notification
      state: "on"
    - service: persistent_notification.create
      data:
        title: "{{ title }}"
        message: "{{ message }}"

notify_will:
  description: "Send a notification to Will's phone and the HA UI"
  mode: parallel
  fields:
    title:
      description: "The title of the notification"
      example: "Something Important!"
    message:
      description: "The message body of the notification"
      example: "A thing has happened, though you ought to know"
  sequence:
    - service: persistent_notification.create
      data:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.mobile_app_will_s_pixel_6_pro
      data:
        title: "{{ title }}"
        message: "{{ message }}"

send_washing_machine_user_choice_notif:
  description: "Send a notification asking who's using the washing machine"
  mode: parallel
  fields:
    target_device:
      description: "The device to notify"
      example: "mobile_app_nokia_3310"
  sequence:
    - service: "notify.{{ target_device }}"
      data:
        message: "Who's using the washing machine?"
        data:
          actions:
            - action: "MATT_USING_WASHING_MACHINE"
              title: "Matt"
            - action: "TOM_USING_WASHING_MACHINE"
              title: "Tom"
            - action: "WILL_USING_WASHING_MACHINE"
              title: "Will"

start_spotify_on_device:
  description: "Start Spotify playback on a particular device"
  mode: restart
  fields:
    entity_id:
      # yamllint disable-line rule:line-length
      description: "The ID of the device to start playback on, used in creating a stopping condition for the exponential backoff"
      example: "entity_id"
    device_key:
      # yamllint disable-line rule:line-length
      description: "The key to use in identifying the device (i.e. `spotify_device_id` or `entity_id`)"
      example: "entity_id"
    device_value:
      description: "The value to use in identifying the device"
      example: "media_player.hifi_system"
    user_name:
      # yamllint disable-line rule:line-length
      description: "The name of the user, to determine which Spotify account to use"
      example: "Dave"
  sequence:
    - service: script.debug_persistent_notification
      data:
        title: Spotcast Arguments
        message: |
          device_key: {{ device_key }}
          device_value: {{ device_value }}
          user_name: {{ user_name | lower }}
    - service: spotcast.start
      data:
        '{{device_key}}': '{{ device_value }}'
        account: '{{ user_name | lower }}'
        shuffle: true
        force_playback: true

crt_pi_update_display:
  description: "Update the CRT Pi display from the chosen media player's track"
  mode: parallel
  sequence:
    - alias: "Set Variables"
      variables:
        media_player: "{{ states('input_select.crt_pi_display_source') }}"
        album_artwork_url: |
          {% set url = state_attr(media_player, 'entity_picture') %}
          {{
            "http://homeassistant.local:8123" + url
            if url and url.startswith('/api/')
            else url
          }}
    - service: script.debug_persistent_notification
      data:
        title: CRT Display Update
        message: |
          ```
          Title:   {{ state_attr(media_player, 'media_title') }}
          Artist:  {{ state_attr(media_player, 'media_artist') }}
          Album:   {{ state_attr(media_player, 'media_album_name') }}
          Artwork: {{ album_artwork_url }}
          State:   {{ states(media_player) }}

          Topic:   /crt-pi/display/update_display
          Time:    {{ now().strftime('%Y-%m-%d %H:%M:%S.%f') }}
          ```
    - service: mqtt.publish
      data:
        topic: "/crt-pi/display/update_display"
        payload: |
          {
            "title": "{{ state_attr(media_player, 'media_title') }}",
            "artist": "{{ state_attr(media_player, 'media_artist') }}",
            "album": "{{ state_attr(media_player, 'media_album_name') }}",
            "album_artwork_url": "{{ album_artwork_url }}",
            "state": "{{ states(media_player) }}"
          }

mtrxpi_update_display:
  description: "Update the MtrxPi display from the chosen media player's track"
  mode: parallel
  sequence:
    - alias: "Set Variables"
      variables:
        media_player: "{{ states('input_select.mtrxpi_display_source') }}"
        album_artwork_url: |
          {% set url = state_attr(media_player, 'entity_picture') %}
          {{
            "http://homeassistant.local:8123" + url
            if url and url.startswith('/api/')
            else url
          }}
        media_player_state: |
          {% if states(media_player) in ("playing", "paused", "buffering", "idle") %}
            playing
          {% elif states(media_player) in ("off", "standby") %}
            off
          {% else %}
            -1
          {%endif%}
    - service: script.debug_persistent_notification
      data:
        title: RGB LED Matrix Display Update
        message: |
          ```
          Title:   {{ state_attr(media_player, 'media_title') }}
          Artist:  {{ state_attr(media_player, 'media_artist') }}
          Album:   {{ state_attr(media_player, 'media_album_name') }}
          Artwork: {{ album_artwork_url }}
          State:

          Topic:   /homeassistant/led_matrix/payload
          Time:    {{ now().strftime('%Y-%m-%d %H:%M:%S.%f') }}
          ```
    - service: mqtt.publish
      data:
        topic: "/homeassistant/led_matrix/display"
        payload: |
          {
            "title": "{{ state_attr(media_player, 'media_title') }}",
            "artist": "{{ state_attr(media_player, 'media_artist') }}",
            "album": "{{ state_attr(media_player, 'media_album_name') }}",
            "album_artwork_url": "{{ album_artwork_url }}",
            "state": "{{ states(media_player) }}"
          }
