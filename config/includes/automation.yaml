---

# ------------------------ Internal Services ------------------------ #

  # Custom automation for automatically reloading Pyscript when the files are updated -
  #  no longer needed but kept here for reference
  - alias: Pyscript Auto-Reload
    trigger:
      platform: event
      event_type: folder_watcher
      event_data:
        event_type: modified
    condition: "{{ trigger.event.data.folder == '/config/pyscript' }}"
    action:
      - service: pyscript.reload
      - service: persistent_notification.create
        data:
          title: Pyscript has been reloaded
          message: >
            Triggered by `{{ trigger.event.data.folder }}/{{ trigger.event.data.file}}`

# ------------------------ Will's Room ------------------------ #

  # When a change is detected by the sensor (from any source), set the input_number
  # value to change the slider on the front end
  - alias: /input_number/wills_room_curtain_position/set_value
    id: set_will_s_room_curtain_position_slider
    trigger:
      platform: state
      entity_id: sensor.will_s_room_curtain_position
    condition:
      condition: template
      value_template: >
        {{ 
          ( trigger.from_state.state | int - trigger.to_state.state | int ) | abs > 0 
        }}
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.wills_room_curtain_position
        data:
          value: '{{ trigger.to_state.state | int }}'

  # When the slider (input number value) is changed, update the curtain position
  - alias: /input_number/wills_room_curtain_position/value_updated
    id: will_s_room_curtain_position_slider_moved
    mode: single
    max_exceeded: silent
    trigger:
      platform: state
      entity_id: input_number.wills_room_curtain_position
    action:
      - service: pyscript.set_curtain_position
        data:
          position: '{{ trigger.to_state.state | int }}'
      - delay: 5

  - alias: /door/wills_room/open_while_will_away
    id: wills_room_door_opened_whilst_will_away
    trigger:
      platform: state
      entity_id: binary_sensor.wills_bedroom_door
      to: "on"
    condition: "{{ states('person.will') == 'away' }}"
    action:
      - service: pyscript.open_curtain
      - service: notify.mobile_app_will_s_pixel_4_xl
        data:
          message: Bedroom door has been opened
          title: Security Alert!
      - service: light.turn_on
        data:
          entity_id: light.wills_shapes
          brightness_pct: 100
          effect: 'Cops'
      - service: media_player.volume_set
        target:
          entity_id: media_player.wills_bedroom_home_hub
        data:
          volume_level: 1
      - service: media_extractor.play_media
        target:
          entity_id: media_player.wills_bedroom_home_hub
        data:
          media_content_type: VIDEO
          media_content_id: https://www.youtube.com/watch?v=Zd68AthoNIw

# ------------------------ Hue Remotes ------------------------ #

  # --- --- --- --- --- Will's Room --- --- --- --- --- #

  # Will's Room Remote Button 1 Short Press - Turn Will's Room on
  - alias: /hue/remote/will_s_room/button1/short_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: short_release
        subtype: 1
    action:
      - service: light.turn_on
        target:
          area_id: will_s_room

  # Will's Room Remote Button 2 Short Press - Brighten Will's Room by 25
  - alias: /hue/remote/will_s_room/button2/short_press
    mode: queued
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: short_release
        subtype: 2
    condition:
      condition: state
      state: "on"
      entity_id:
        - light.wills_shapes
    action:
      - service: light.turn_on
        entity_id: light.wills_shapes
        data_template:
          brightness: '{{states.light.wills_shapes.attributes.brightness + 25}}'

  # Will's Room Remote Button 2 Held Down - Brighten Will's Room by 50 (repeated)
  - alias: /hue/remote/will_s_room/button2/held_down
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: repeat
        subtype: 2
    condition:
      condition: state
      state: "on"
      entity_id:
        - light.wills_shapes
    action:
      - service: light.turn_on
        entity_id: light.wills_shapes
        data_template:
          brightness: '{{states.light.wills_shapes.attributes.brightness + 50}}'

  # Will's Room Remote Button 3 Short Press - Dim Will's Room by 25
  - alias: /hue/remote/will_s_room/button3/short_press
    mode: queued
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: short_release
        subtype: 3
    condition:
      condition: state
      state: "on"
      entity_id:
        - light.wills_shapes
    action:
      - service: light.turn_on
        entity_id: light.wills_shapes
        data_template:
          brightness: '{{states.light.wills_shapes.attributes.brightness - 25}}'

  # Will's Room Remote Button 3 Held Down - Dim Will's Room by 50 (repeated)
  - alias: /hue/remote/will_s_room/button3/held_down
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: repeat
        subtype: 3
    condition:
      condition: state
      state: "on"
      entity_id:
        - light.wills_shapes
    action:
      - service: light.turn_on
        entity_id: light.wills_shapes
        data_template:
          brightness: '{{states.light.wills_shapes.attributes.brightness - 50}}'

  # Will's Room Remote Button 4 Short Press - Turn Will's Room off
  - alias: /hue/remote/will_s_room/button4/short_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: aa96a5e6e87f4076da2f1501c53e02c8
        domain: hue
        platform: device
        type: short_release
        subtype: 4
    action:
      - service: light.turn_off
        target:
          area_id: will_s_room

  # --- --- --- --- --- Kitchen --- --- --- --- --- #

  # Kitchen Remote Button 1 Long Press - Turn on all the Kitchen lights
  - alias: /hue/remote/kitchen/button1/long_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: long_release
        subtype: 1
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: repeat
        subtype: 1
    action:
      - service: light.turn_on
        target:
          area_id: kitchen

  # Kitchen Remote Button 2 Short Press
  - alias: /hue/remote/kitchen/button2/short_press
    mode: queued
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: short_release
        subtype: 2
    condition:
      condition: state
      state: "on"
      entity_id:
        - light.kitchen_work_light
    action:
      - service: light.turn_on
        entity_id: light.kitchen_work_light
        data_template:
          brightness: '{{states.light.kitchen_work_light.attributes.brightness + 25}}'

  # Kitchen Remote Button 2 Held Down
  - alias: /hue/remote/kitchen/button2/held_down
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: repeat
        subtype: 2
    condition:
      condition: state
      state: "on"
      entity_id: light.kitchen_work_light
    action:
      - service: light.turn_on
        entity_id: light.kitchen_work_light
        data_template:
          brightness: '{{states.light.kitchen_work_light.attributes.brightness + 50}}'

  # Kitchen Remote Button 3 Short Press
  - alias: /hue/remote/kitchen/button3/short_press
    mode: queued
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: short_release
        subtype: 3
    condition:
      condition: state
      state: "on"
      entity_id: light.kitchen_work_light
    action:
      - service: light.turn_on
        entity_id: light.kitchen_work_light
        data_template:
          brightness: '{{states.light.kitchen_work_light.attributes.brightness + 25}}'

  # Kitchen Remote Button 3 Held Down
  - alias: /hue/remote/kitchen/button3/held_down
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: repeat
        subtype: 3
    condition:
      condition: state
      state: "on"
      entity_id: light.kitchen_work_light
    action:
      - service: light.turn_on
        entity_id: light.kitchen_work_light
        data_template:
          brightness: '{{states.light.kitchen_work_light.attributes.brightness + 50}}'

  # Kitchen Remote Button 4 Short Press
  - alias: /hue/remote/kitchen/button4/short_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: short_release
        subtype: 4
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: long_release
        subtype: 4
      - device_id: c4b6cf2f6bd194eefe26f2a22e545b7a
        domain: hue
        platform: device
        type: initial_press
        subtype: 4
    action:
      - service: light.turn_off
        target:
          area_id: kitchen

  # --- --- --- --- --- Lounge --- --- --- --- --- #

  # Lounge Remote Button 1 Short Press
  - alias: /hue/remote/lounge/button1/short_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: short_release
        subtype: 1
    action:
      - service: light.turn_on
        target:
          area_id: lounge

  # Lounge Remote Button 2 Short Press
  - alias: /hue/remote/lounge/button2/short_press
    mode: queued
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: short_release
        subtype: 2
    condition:
      - condition: or
        conditions:
          - condition: state
            state: "on"
            entity_id:
              - light.the_snail
          - condition: state
            state: "on"
            entity_id:
              - light.galaxy_light
    action:
      - service: light.turn_on
        entity_id: light.the_snail
        data_template:
          brightness: '{{states.light.the_snail.attributes.brightness + 25}}'
      - service: light.turn_on
        entity_id: light.galaxy_light
        data_template:
          brightness: '{{states.light.galaxy_light.attributes.brightness + 25}}'

  # Lounge Remote Button 2 Held Down
  - alias: /hue/remote/lounge/button2/held_down
    mode: queued
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: repeat
        subtype: 2
    condition:
      - condition: or
        conditions:
          - condition: state
            state: "on"
            entity_id:
              - light.the_snail
          - condition: state
            state: "on"
            entity_id:
              - light.galaxy_light
    action:
      - service: light.turn_on
        entity_id: light.the_snail
        data_template:
          brightness: '{{states.light.the_snail.attributes.brightness + 50}}'
      - service: light.turn_on
        entity_id: light.galaxy_light
        data_template:
          brightness: '{{states.light.galaxy_light.attributes.brightness + 50}}'

  # Lounge Remote Button 3 Short Press
  - alias: /hue/remote/lounge/button3/short_press
    mode: queued
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: short_release
        subtype: 3
    condition:
      - condition: or
        conditions:
          - condition: state
            state: "on"
            entity_id:
              - light.the_snail
          - condition: state
            state: "on"
            entity_id:
              - light.galaxy_light
    action:
      - service: light.turn_on
        entity_id: light.the_snail
        data_template:
          brightness: '{{states.light.the_snail.attributes.brightness - 25}}'
      - service: light.turn_on
        entity_id: light.galaxy_light
        data_template:
          brightness: '{{states.light.galaxy_light.attributes.brightness - 25}}'

  # Lounge Remote Button 3 Held Down
  - alias: /hue/remote/lounge/button3/held_down
    mode: queued
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: repeat
        subtype: 3
    condition:
      - condition: or
        conditions:
          - condition: state
            state: "on"
            entity_id:
              - light.the_snail
          - condition: state
            state: "on"
            entity_id:
              - light.galaxy_light
    action:
      - service: light.turn_on
        entity_id: light.the_snail
        data_template:
          brightness: '{{states.light.the_snail.attributes.brightness - 50}}'
      - service: light.turn_on
        entity_id: light.galaxy_light
        data_template:
          brightness: '{{states.light.galaxy_light.attributes.brightness - 50}}'

  # Lounge Remote Button 4 Short Press
  - alias: /hue/remote/lounge/button4/short_press
    mode: single
    max_exceeded: silent
    trigger:
      - device_id: 6e2fd8c60e6ff2ffcb8f60627281f767
        domain: hue
        platform: device
        type: short_release
        subtype: 4
    action:
      - service: light.turn_off
        target:
          area_id: lounge

# ------------------------ Sun ------------------------ #

  # Open the curtain when the Sun rises past -6'
  - alias: /sun/rise/open_curtain_before_sunrise
    id: open_curtain_pre_sunrise
    trigger:
      platform: numeric_state
      entity_id: sensor.sun_elevation
      above: -6
    action:
      - service: pyscript.open_curtain

  - alias: /sun/set
    id: sun_set
    trigger:
      platform: numeric_state
      entity_id: sensor.sun_elevation
      below: "0"
    action:
      - service: switch.turn_on
        target:
          entity_id: switch.terrace_lights

  # Open the curtain when the Sun sets past -18'
  - alias: /sun/set/close_curtain_after_sunset
    id: close_curtain_post_sunset
    trigger:
      platform: numeric_state
      entity_id: sensor.sun_elevation
      below: -18
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: person.will
                state: "home"
            sequence:
              - delay: 3600
      - wait_template: "{{ is_state('binary_sensor.wills_balcony_door', 'off') }}"
        timeout: 3600
        continue_on_timeout: false
      - service: pyscript.close_curtain

# ------------------------ Scheduled ------------------------ #

  - alias: /light/terrace_lights/turn_off_at_midnight
    id: midnight_terrace_lights_off
    trigger:
      - platform: time
        at: "00:00:00"
    action:
      - wait_template: "{{ is_state('binary_sensor.wills_balcony_door', 'off') }}"
        timeout: 900
      - service: switch.turn_off
        target:
          entity_id: switch.terrace_lights

# ------------------------ Critical ------------------------ #

  - alias: /switch/washing_machine/keep_turned_on
    id: keep_washing_machine_on
    mode: single
    trigger:
      - platform: state
        entity_id: switch.washing_machine
        to: "off"
    action:
      - service: switch.turn_on
        target:
          entity_id: switch.washing_machine
      - service: script.notify_will
        data:
          title: "Critical Automation Triggered"
          # yamllint disable-line rule:line-length
          message: "`keep_washing_machine_on` was triggered with state `{{ trigger.to_state.state}}`"

  - alias: /light/galaxy_light/restart_when_offline
    id: restart_galaxy_light_when_offline
    trigger:
      - platform: state
        entity_id: binary_sensor.galaxy_light_online
        to: "off"
    action:
      # Restart the Galaxy Light with a 5s delay
      - service: script.restart_galaxy_light
        data:
          switch_on_delay: 5
      # Wait for the GL to come back online, with a 10s timeout
      - wait_template: "{{ is_state('binary_sensor.galaxy_light_online', 'on') }}"
        timeout: 10
      - alias: "Restart with 30s delay if not back online"
        choose:
          - alias: "Light didn't come back online"
            conditions: "{{ not wait.completed }}"
            sequence:
              - alias: "Restart the GL with a 30s delay"
                service: script.restart_galaxy_light
                data:
                  switch_on_delay: 30
              - wait_template: >
                  {{ is_state('binary_sensor.galaxy_light_online', 'on') }}
                timeout: 10
      - alias: "Resume original state if the restart succeeded, else notify Will"
        choose:
          - alias: "Galaxy light is back online"
            conditions: "{{ is_state('binary_sensor.galaxy_light_online', 'on') }}"
            sequence:
              - choose:
                  - alias: "Galaxy Light was ON before it went offline"
                    conditions: >
                      {{ states('input_text.galaxy_light_previous_state') == 'on' }}
                    sequence:
                      - service: switch.turn_on
                        target:
                          entity_id: light.galaxy_light
                  - alias: "Galaxy Light was OFF before it went offline"
                    conditions: >
                      {{ states('input_text.galaxy_light_previous_state') == 'off' }}
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: light.galaxy_light
                default:
                  - service: script.notify_will
                    data:
                      title: "Automation Failure"
                      # yamllint disable-line rule:line-length
                      message: "Galaxy Light restart failed: previous state was `{{ trigger.from_state.state }}` and current state is `{{ states('light.galaxy_light') }}`"
        default:
          - service: script.notify_will
            data:
              title: "Automation Failure"
              # yamllint disable-line rule:line-length
              message: "Galaxy Light restart failed: previous state was `{{ states('input_text.galaxy_light_previous_state') }}` and current state is `{{ states('light.galaxy_light') }}`"

# ------------------------ Input Text/Select/Boolean ------------------------ #

  - alias: /light/galaxy_light/preserve_state
    id: preserve_galaxy_light_state
    trigger:
      - platform: state
        entity_id: light.galaxy_light
        for:
          seconds: 10
    condition: "{{ trigger.to_state.state != 'unavailable' }}"
    action:
      - service: persistent_notification.create
        data:
          title: Galaxy light Status Changed
          # yamllint disable-line rule:line-length
          message: "Changed from {{ trigger.from_state.state }} to {{ trigger.to_state.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.galaxy_light_previous_state
          value: "{{ trigger.to_state.state }}"

  - alias: Initialise "Entity Force Updater" Options
    id: init_entity_force_updater_options
    trigger:
      - platform: homeassistant
        event: start
    action:
#      - delay:
#          minutes: 15
      - service: input_select.set_options
        target:
          entity_id: input_select.entity_force_updater
        data_template:
          options: |
            {% for domain in [ 
              states.binary_sensor,
              states.climate,
              states.cover,
              states.device_tracker,
              states.light,
              states.media_player,
              states.person,
              states.remote,
              states.scene,
              states.script,
              states.sensor,
              states.sun,
              states.switch,
              states.var,
              states.water_heater,
              states.weather,
            ] -%}
              {% for state in domain -%}
                - {{ state.entity_id }}
              {% endfor %}
            {%- endfor %}

  - alias: Force Update Entity
    id: force_update_entity
    trigger:
      - platform: state
        entity_id: input_select.entity_force_updater
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: "{{ trigger.to_state.state }}"

  - alias: /input_boolean/mini_crt_power
    id: input_boolean_mini_crt_power
    trigger:
      - platform: state
        entity_id: input_boolean.mini_crt_power
        for:
          seconds: 1
    action:
      - choose:
          - alias: "Turn On"
            conditions: "{{ states('input_boolean.mini_crt_power') == 'on' }}"
            sequence:
              - service: rest_command.mini_crt_turn_power_on
          - alias: "Turn Off"
            conditions: "{{ states('input_boolean.mini_crt_power') == 'off' }}"
            sequence:
              - service: rest_command.mini_crt_turn_power_off
        default:
          - service: script.notify_will
            data:
              title: "Automation Failure"
              # yamllint disable-line rule:line-length
              message: "Automation `input_boolean_mini_crt_power` failed: unknown previous state of `{{ trigger.from_state.state }}`"

  - alias: /input_boolean/mini_crt_nanoleaf_updater
    id: input_boolean_mini_crt_nanoleaf_updater
    trigger:
      - platform: state
        entity_id: input_boolean.mini_crt_nanoleaf_updater
        for:
          seconds: 1
    action:
      - choose:
          - alias: "Turn On"
            conditions: >
              {{ states('input_boolean.mini_crt_nanoleaf_updater') == 'on' }}
            sequence:
              - service: rest_command.mini_crt_turn_nanoleaf_updater_on
          - alias: "Turn Off"
            conditions: >
              {{ states('input_boolean.mini_crt_nanoleaf_updater') == 'off' }}
            sequence:
              - service: rest_command.mini_crt_turn_nanoleaf_updater_off
        default:
          - service: script.notify_will
            data:
              title: "Automation Failure"
              # yamllint disable-line rule:line-length
              message: "Automation `input_boolean_mini_crt_nanoleaf_updater` failed: unknown previous state of `{{ trigger.from_state.state }}`"

  - alias: /input_boolean/mini_crt_power/force_update
    id: force_update_input_boolean_mini_crt_power
    trigger:
      - platform: state
        entity_id: media_player.hifi_system
        to:
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.mini_crt_power_state

# ------------------------ Financial ------------------------ #

  - alias: /notification/credit_card_top_up/send
    id: send_cc_top_up_notif
    trigger:
      - platform: time
        at:
          - "21:00:00"
    condition: |
      {{ 
        ( states('var.truelayer_balance_amex') | float - 
        states('var.truelayer_balance_monzo_credit_cards') | float )  | abs > 0.01
      }}
    action:
      - service: notify.mobile_app_will_s_pixel_4_xl
        data:
          # yamllint disable-line rule:line-length
          message: "Credit Cards pot is £{{ ( ( states('var.truelayer_balance_amex') | float - states('var.truelayer_balance_monzo_credit_cards') | float ) | round(2) ) }} too low. Top up pot?"
          data:
            actions:
              - action: "TOP_UP_CREDIT_CARD_POT"
                title: "Top Up"

  - alias: /finance/monzo/top_up_credit_card_pot
    id: transfer_credit_card_pot_money
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "TOP_UP_CREDIT_CARD_POT"
    action:
      - service: persistent_notification.create
        data:
          title: NOTIFICATION
          message: |
            {{ 
              ( ( states('var.truelayer_balance_amex') | float - 
              states('var.truelayer_balance_monzo_credit_cards') | float ) | round(2) )
            }}
      - service: pyscript.top_up_credit_card_pot
        data:
          top_up_amount: |
            {{ 
              ( ( states('var.truelayer_balance_amex') | float - 
              states('var.truelayer_balance_monzo_credit_cards') | float ) | round(2) )
            }}

# ------------------------ Webhooks ------------------------ #

  - alias: /webhook/will_s_macbook_pro_battery_percentage
    id: will_s_macbook_pro_battery_percentage_webhook
    trigger:
      - platform: webhook
        webhook_id: will_s_macbook_pro_battery_percentage
    action:
      - service: var.set
        data:
          entity_id: var.will_s_macbook_pro_battery_percentage
          value: "{{ trigger.json.battery_percentage }}"
      - service: var.update
        data:
          entity_id: var.will_s_macbook_pro_battery_percentage
      - service: var.set
        data:
          entity_id: var.will_s_macbook_pro_battery_seconds_left
          value: "{{ trigger.json.battery_seconds_left }}"
      - service: var.set
        data:
          entity_id: var.will_s_macbook_pro_battery_power_plugged
          value: "{{ trigger.json.power_plugged }}"

# ------------------------ Devices ------------------------ #

  - alias: /switch/will_s_macbook_pro/turn_charger_on
    id: turn_will_s_macbook_pro_charger_on
    trigger:
      - platform: numeric_state
        entity_id: var.will_s_macbook_pro_battery_percentage
        below: 25
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.will_s_macbook

  - alias: /switch/will_s_macbook_pro/turn_charger_off
    id: turn_will_s_macbook_pro_charger_off
    trigger:
      - platform: numeric_state
        entity_id: var.will_s_macbook_pro_battery_percentage
        above: 95
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: var.will_s_macbook_pro_battery_power_plugged
            state: "True"
          - condition: numeric_state
            entity_id: sensor.will_s_macbook_current_consumption
            above: 40
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.will_s_macbook

  - alias: /switch/hifi_amp/auto_control
    id: auto_control_hifi_amp
    trigger:
      - platform: state
        entity_id:
          - media_player.hifi_system
          - media_player.lounge_bravia_tv
        from:
          - "idle"
          - "off"
          - "unavailable"
          - "unknown"
        to:
          - "idle"
          - "paused"
          - "playing"
    action:
      - service: switch.turn_on
        entity_id: switch.hifi_amp

# ------------------------ RESTful Sensors ------------------------ #

  - alias: /rest/mini_crt_power_state
    id: rest_mini_crt_power_state
    trigger:
      - platform: state
        entity_id: sensor.mini_crt_power_state
    action:
      - choose:
          - alias: "True"
            conditions: "{{ states('sensor.mini_crt_power_state') | string == 'True' }}"
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.mini_crt_power
          - alias: "False"
            conditions: >
              {{ not states('sensor.mini_crt_power_state') | string == "True" }}
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.mini_crt_power
        default:
          - service: script.notify_will
            data:
              title: "Automation Failure"
              # yamllint disable-line rule:line-length
              message: "Automation `rest_mini_crt_power_state` failed: unknown previous state of `{{ trigger.from_state.state }}`"

  - alias: /rest/mini_crt_nanoleaf_updater_state
    id: rest_mini_crt_nanoleaf_updater_state
    trigger:
      - platform: state
        entity_id: sensor.mini_crt_nanoleaf_updater_state
    action:
      - choose:
          - alias: "True"
            conditions: >
              {{ states('sensor.mini_crt_nanoleaf_updater_state') | string == 'True' }}
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.mini_crt_nanoleaf_updater
          - alias: "False"
            conditions: >
              {{ states('sensor.mini_crt_nanoleaf_updater_state') | string == "False" }}
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.mini_crt_nanoleaf_updater
        default:
          - service: script.notify_will
            data:
              title: "Automation Failure"
              # yamllint disable-line rule:line-length
              message: "Automation `rest_mini_crt_nanoleaf_updater_state` failed: unknown previous state of `{{ trigger.from_state.state }}`"
